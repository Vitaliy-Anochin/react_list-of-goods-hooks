{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortBy","setSortBy","isStarted","setIsStarted","sorted","goods","visibleGoods","sort","goodA","goodB","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","onClick","map","good","current","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,oDAbCC,EAAkB,CACtB,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,oBAAAA,E,iBAAAA,M,KAgCE,IAAME,EAAM,WACjB,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4BF,mBAASH,EAASM,MAA9C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAkCL,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KAOMC,EApCR,SACEC,EACAL,EACAH,GAEA,IAAMS,EAAY,YAAOD,GAkBzB,OAhBAC,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQT,GACN,KAAKP,EAASiB,SACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKhB,EAASmB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAIThB,GACFS,EAAaQ,UAGRR,EAaQS,CACbrB,EACAM,EACAH,GAGF,OACE,sBAAKmB,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,2BAGCd,GACC,wBACEe,KAAK,SACLD,UAAU,SACVE,QAAS,kBAAMf,GAAa,IAH9B,oBAQAD,GACA,qCACE,oBAAIc,UAAU,YAAd,SACGZ,EAAOe,KAAI,SAAAC,GAAI,OACd,oBAEEJ,UAAU,YAFZ,SAIGI,GAHIA,QAOX,uBAAMJ,UAAU,cAAhB,UACE,wBACEC,KAAK,SACLD,UAAU,SACVE,QAAS,kBAAMjB,EAAUR,EAASiB,WAHpC,iCAOA,wBACEO,KAAK,SACLD,UAAU,SACVE,QAAS,kBAAMjB,EAAUR,EAASmB,SAHpC,4BAOA,wBACEK,KAAK,SACLD,UAAU,SACVE,QAAS,kBAAMpB,GAAc,SAAAuB,GAAO,OAAKA,MAH3C,wBAQF,wBACEJ,KAAK,SACLD,UAAU,SACVE,QAAS,kBA9DjBpB,GAAc,QACdG,EAAUR,EAASM,OA0Db,0BC/GVuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.de4037d4.chunk.js","sourcesContent":["import { useState } from 'react';\n\nimport './App.scss';\n\nconst goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE = 'None',\n  ALPHABET = 'Alphabet',\n  LENGTH = 'Length',\n}\n\nfunction getReorderedGoods(\n  goods: string[],\n  sortBy: SortType,\n  isReversed: boolean,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((goodA, goodB) => {\n    switch (sortBy) {\n      case SortType.ALPHABET:\n        return goodA.localeCompare(goodB);\n      case SortType.LENGTH:\n        return goodA.length - goodB.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortBy, setSortBy] = useState(SortType.NONE);\n  const [isStarted, setIsStarted] = useState(true);\n\n  const reset = () => {\n    setIsReversed(false);\n    setSortBy(SortType.NONE);\n  };\n\n  const sorted = getReorderedGoods(\n    goodsFromServer,\n    sortBy,\n    isReversed,\n  );\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App__title\">\n        List of goods\n      </h1>\n      {isStarted && (\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => setIsStarted(false)}\n        >\n          Start\n        </button>\n      )}\n      {!isStarted && (\n        <>\n          <ul className=\"App__list\">\n            {sorted.map(good => (\n              <li\n                key={good}\n                className=\"App__item\"\n              >\n                {good}\n              </li>\n            ))}\n          </ul>\n          <span className=\"App__button\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setSortBy(SortType.ALPHABET)}\n            >\n              Sort alphabetically\n            </button>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setSortBy(SortType.LENGTH)}\n            >\n              Sort by length\n            </button>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => setIsReversed(current => !current)}\n            >\n              Reverse\n            </button>\n          </span>\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => reset()}\n          >\n            Reset\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}